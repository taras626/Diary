// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewDiary.Data;

#nullable disable

namespace NewDiary.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231002055441_NewDiary")]
    partial class NewDiary
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NewDiary.Model.Auditorium", b =>
                {
                    b.Property<int>("IdAuditorium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuditorium"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAuditorium");

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("NewDiary.Model.Computer", b =>
                {
                    b.Property<int>("IdComputer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComputer"), 1L, 1);

                    b.Property<int>("AuditoriumIdAuditorium")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdComputer");

                    b.HasIndex("AuditoriumIdAuditorium");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("NewDiary.Model.Department", b =>
                {
                    b.Property<int>("IdDepartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDepartment"), 1L, 1);

                    b.Property<string>("NameDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDepartment");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NewDiary.Model.DiaryEntry", b =>
                {
                    b.Property<int>("IdDiaryEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDiaryEntry"), 1L, 1);

                    b.Property<int>("EmployeeIdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdWork")
                        .HasColumnType("int");

                    b.HasKey("IdDiaryEntry");

                    b.HasIndex("EmployeeIdEmployee");

                    b.ToTable("DiaryEntries");
                });

            modelBuilder.Entity("NewDiary.Model.ElementOfWork", b =>
                {
                    b.Property<int>("IdElementOfWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdElementOfWork"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Norm")
                        .HasColumnType("int");

                    b.Property<int>("SubGroupWorkIdSubGroupWork")
                        .HasColumnType("int");

                    b.HasKey("IdElementOfWork");

                    b.HasIndex("SubGroupWorkIdSubGroupWork");

                    b.ToTable("ElementsOfWorks");
                });

            modelBuilder.Entity("NewDiary.Model.Employee", b =>
                {
                    b.Property<int>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmployee"), 1L, 1);

                    b.Property<int>("DepartmentIdDepartment")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmployee");

                    b.HasIndex("DepartmentIdDepartment");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("NewDiary.Model.GroupWork", b =>
                {
                    b.Property<int>("IdGroupWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGroupWork"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGroupWork");

                    b.ToTable("GroupWorks");
                });

            modelBuilder.Entity("NewDiary.Model.SubGroupWork", b =>
                {
                    b.Property<int>("IdSubGroupWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSubGroupWork"), 1L, 1);

                    b.Property<int>("GroupWorkIdGroupWork")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSubGroupWork");

                    b.HasIndex("GroupWorkIdGroupWork");

                    b.ToTable("SubGroupWorks");
                });

            modelBuilder.Entity("NewDiary.Model.Work", b =>
                {
                    b.Property<int>("IdWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWork"), 1L, 1);

                    b.Property<int>("CountOfEntities")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCompletion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiaryEntry")
                        .HasColumnType("int");

                    b.Property<int>("GroupOfThisWorkIdGroupWork")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeSpent")
                        .HasColumnType("int");

                    b.Property<int>("UsedComputerIdComputer")
                        .HasColumnType("int");

                    b.HasKey("IdWork");

                    b.HasIndex("DiaryEntry")
                        .IsUnique();

                    b.HasIndex("GroupOfThisWorkIdGroupWork");

                    b.HasIndex("UsedComputerIdComputer");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("NewDiary.Model.Computer", b =>
                {
                    b.HasOne("NewDiary.Model.Auditorium", "Auditorium")
                        .WithMany("Computers")
                        .HasForeignKey("AuditoriumIdAuditorium")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditorium");
                });

            modelBuilder.Entity("NewDiary.Model.DiaryEntry", b =>
                {
                    b.HasOne("NewDiary.Model.Employee", "Employee")
                        .WithMany("DiaryEntries")
                        .HasForeignKey("EmployeeIdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("NewDiary.Model.ElementOfWork", b =>
                {
                    b.HasOne("NewDiary.Model.SubGroupWork", "SubGroupWork")
                        .WithMany("ElementsOfWorks")
                        .HasForeignKey("SubGroupWorkIdSubGroupWork")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubGroupWork");
                });

            modelBuilder.Entity("NewDiary.Model.Employee", b =>
                {
                    b.HasOne("NewDiary.Model.Department", "Department")
                        .WithMany("EmployeeOfDepartment")
                        .HasForeignKey("DepartmentIdDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("NewDiary.Model.SubGroupWork", b =>
                {
                    b.HasOne("NewDiary.Model.GroupWork", "GroupWork")
                        .WithMany("SubGroupsWork")
                        .HasForeignKey("GroupWorkIdGroupWork")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupWork");
                });

            modelBuilder.Entity("NewDiary.Model.Work", b =>
                {
                    b.HasOne("NewDiary.Model.DiaryEntry", "Entry")
                        .WithOne("ObjOfWork")
                        .HasForeignKey("NewDiary.Model.Work", "DiaryEntry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewDiary.Model.GroupWork", "GroupOfThisWork")
                        .WithMany("Works")
                        .HasForeignKey("GroupOfThisWorkIdGroupWork")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewDiary.Model.Computer", "UsedComputer")
                        .WithMany("Works")
                        .HasForeignKey("UsedComputerIdComputer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");

                    b.Navigation("GroupOfThisWork");

                    b.Navigation("UsedComputer");
                });

            modelBuilder.Entity("NewDiary.Model.Auditorium", b =>
                {
                    b.Navigation("Computers");
                });

            modelBuilder.Entity("NewDiary.Model.Computer", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("NewDiary.Model.Department", b =>
                {
                    b.Navigation("EmployeeOfDepartment");
                });

            modelBuilder.Entity("NewDiary.Model.DiaryEntry", b =>
                {
                    b.Navigation("ObjOfWork")
                        .IsRequired();
                });

            modelBuilder.Entity("NewDiary.Model.Employee", b =>
                {
                    b.Navigation("DiaryEntries");
                });

            modelBuilder.Entity("NewDiary.Model.GroupWork", b =>
                {
                    b.Navigation("SubGroupsWork");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("NewDiary.Model.SubGroupWork", b =>
                {
                    b.Navigation("ElementsOfWorks");
                });
#pragma warning restore 612, 618
        }
    }
}
