// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewDiary.Data;

#nullable disable

namespace NewDiary.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231009063439_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ComputerWork", b =>
                {
                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("ComputerId", "WorkId");

                    b.HasIndex("WorkId");

                    b.ToTable("ComputerWork");
                });

            modelBuilder.Entity("NewDiary.Model.Auditorium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameAuditorium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("NewDiary.Model.Computer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("NameComputer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriumId");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("NewDiary.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NewDiary.Model.ElementOfWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameElementOfWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Norm")
                        .HasColumnType("int");

                    b.Property<int>("SubGroupWorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubGroupWorkId");

                    b.ToTable("ElementsOfWorks");
                });

            modelBuilder.Entity("NewDiary.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("NameEmployee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("NewDiary.Model.GroupWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameGroupWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupWorks");
                });

            modelBuilder.Entity("NewDiary.Model.SubGroupWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GroupWorkId")
                        .HasColumnType("int");

                    b.Property<string>("NameSubGroupWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupWorkId");

                    b.ToTable("SubGroupWorks");
                });

            modelBuilder.Entity("NewDiary.Model.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountOfEntities")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCompletion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfInput")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElementOfWorkId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSpent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElementOfWorkId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("ComputerWork", b =>
                {
                    b.HasOne("NewDiary.Model.Computer", null)
                        .WithMany()
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewDiary.Model.Work", null)
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewDiary.Model.Computer", b =>
                {
                    b.HasOne("NewDiary.Model.Auditorium", "Auditorium")
                        .WithMany("Computers")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditorium");
                });

            modelBuilder.Entity("NewDiary.Model.ElementOfWork", b =>
                {
                    b.HasOne("NewDiary.Model.SubGroupWork", "SubGroupWork")
                        .WithMany("ElementsOfWorks")
                        .HasForeignKey("SubGroupWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubGroupWork");
                });

            modelBuilder.Entity("NewDiary.Model.Employee", b =>
                {
                    b.HasOne("NewDiary.Model.Department", "Department")
                        .WithMany("EmployeeOfDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("NewDiary.Model.SubGroupWork", b =>
                {
                    b.HasOne("NewDiary.Model.GroupWork", "GroupWork")
                        .WithMany("SubGroupsWork")
                        .HasForeignKey("GroupWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupWork");
                });

            modelBuilder.Entity("NewDiary.Model.Work", b =>
                {
                    b.HasOne("NewDiary.Model.ElementOfWork", "ElementOfWork")
                        .WithMany("Works")
                        .HasForeignKey("ElementOfWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewDiary.Model.Employee", "Employee")
                        .WithMany("Work")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElementOfWork");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("NewDiary.Model.Auditorium", b =>
                {
                    b.Navigation("Computers");
                });

            modelBuilder.Entity("NewDiary.Model.Department", b =>
                {
                    b.Navigation("EmployeeOfDepartment");
                });

            modelBuilder.Entity("NewDiary.Model.ElementOfWork", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("NewDiary.Model.Employee", b =>
                {
                    b.Navigation("Work");
                });

            modelBuilder.Entity("NewDiary.Model.GroupWork", b =>
                {
                    b.Navigation("SubGroupsWork");
                });

            modelBuilder.Entity("NewDiary.Model.SubGroupWork", b =>
                {
                    b.Navigation("ElementsOfWorks");
                });
#pragma warning restore 612, 618
        }
    }
}
